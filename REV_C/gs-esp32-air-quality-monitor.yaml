substitutions:
  update_interval: 30s

esphome:
  name: gs-air-quality-monitor
  friendly_name: gs-air-quality-monitor
  platformio_options:
    board_build.f_cpu:   80000000L # Reduce CPU speed to reduce heating
    board_build.f_flash: 40000000L
    board_build.flash_mode: dio
    board_build.flash_size: 4MB
  on_boot:
    priority: -100 # only run after everything else is up and running
    then:
      #- rtttl.play: 'star_wars:d=16,o=5,b=100:4e,4e,4e,8c,p,g,4e,8c,p,g,4e,4p,4b,4b,4b,8c6,p,g,4d#,8c,p,g,4e,8p'
      - rtttl.play: 'siren:d=8,o=5,b=100:d,e,d,e,d,e,d,e'

i2c:
  sda: GPIO2
  scl: GPIO1
  frequency: 10kHz

# Configure the PWM outputs to drive the buzzer
output:
  - platform: ledc
    pin: GPIO0
    channel: 0
    id: buzzer_out

rtttl:
  output: buzzer_out
  id: buzzer
  gain: 50%

esp32:
  variant: ESP32C3
  board: esp32-c3-devkitm-1
  framework:
    #type: esp-idf
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    # Go here to generate a new API encryption key: https://esphome.io/components/api.html
    key: "attxpC954GoM2oXlqJZVLMmOw0Pef8LQCuqvhA+7xvI="

ota:
  - platform: esphome
    password: "12345678"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # Enable fallback AP (captive portal) in case wifi connection fails
  ap:
    ssid: "Air Quality Monitor"
    password: "12345678"

web_server:
  port: 80

captive_portal:

mdns:

esp32_ble_tracker:
  scan_parameters:
    active: true

bluetooth_proxy:
  active: true

#deep_sleep:
#  run_duration: 30s
#  sleep_duration: 1min

# Enable the addressable RGB LED on GPIO8
light:
  - platform: neopixelbus
    type: GRB
    variant: WS2812
    pin: GPIO8
    num_leds: 1
    default_transition_length: 0.1s
    name: "RGB Indicator"
    id: indicator_light

# BME680 configuration entry
sensor:
  - platform: bme680
    temperature:
      name: "BME680 Temperature"
      oversampling: 16x
    pressure:
      name: "BME680 Pressure"
    humidity:
      id: "humidity"
      name: "BME680 Humidity"
    gas_resistance:
      id: "gas_resistance"
      name: "BME680 Gas Resistance"
    address: 0x76
    update_interval: ${update_interval}
  - platform: template
    name: "BME680 Indoor Air Quality"
    id: iaq
    icon: "mdi:gauge"
    # calculation: comp_gas = log(R_gas[ohm]) + 0.04 log(Ohm)/%rh * hum[%rh]
    lambda: |-
      return log(id(gas_resistance).state) + 0.04 * id(humidity).state;
    state_class: "measurement"

text_sensor:
  - platform: template
    name: "BME680 IAQ Classification"
    icon: "mdi:checkbox-marked-circle-outline"
    lambda: |-
      if (int(id(iaq).state) <= 50) {
        return {"Excellent"};
      }
      else if (int(id(iaq).state) <= 100) {
        return {"Good"};
      }
      else if (int(id(iaq).state) <= 150) {
        return {"Lightly polluted"};
      }
      else if (int(id(iaq).state) <= 200) {
        return {"Moderately polluted"};
      }
      else if (int(id(iaq).state) <= 250) {
        return {"Heavily polluted"};
      }
      else if (int(id(iaq).state) <= 350) {
        return {"Severely polluted"};
      }
      else if (int(id(iaq).state) <= 500) {
        return {"Extremely polluted"};
      }
      else {
        return {"unknown"};
      }

